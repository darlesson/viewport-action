{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./examples/scripts/examples.js","webpack:///./src/index.js","webpack:///./src/viewportEvent.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA4D;;AAE5D;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA,gBAAgB,UAAU;AAC1B;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,kDAAc;AACd,kDAAc;AACd,kDAAc;AACd,kDAAc;;AAEd;AACA,kDAAc;AACd;AACA,CAAC;;AAED,kDAAc;AACd,kDAAc;AACd,kDAAc;;AAEd;AACA,kDAAc,8C;;;;;;;;;;;;ACnGd;AAAA;AAA4C;;AAE5C;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,eAAe,sDAAa;AAC5B;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA,4CAA4C,UAAU;;AAEtD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEe,6EAAc,E;;;;;;;;;;;;ACpL7B;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,4EAAa,E","file":"examples.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./examples/scripts/examples.js\");\n","import { default as viewPortAction } from '../../src/index';\n\n/**\n * Shows the dimensions found on screen. The intention is to demonstrate\n * the dimensions and positions are correct.\n * \n * @function visualDebug\n * @param {Event} e The event object.\n */\nlet visualDebug = (e) => {\n\n    let target = e.target,\n        ownerDocument = target.ownerDocument,\n        id = `${target.id}-debug`,\n        debugElement = ownerDocument.getElementById(id);\n\n    if (!debugElement) {\n\n        debugElement = ownerDocument.createElement('div');\n        debugElement.id = id;\n        debugElement.classList.add('debug-element');\n\n        ownerDocument.body.appendChild(debugElement);\n    }\n\n    debugElement.style.top = e.detail.availableTop + 'px';\n    debugElement.style.left = e.detail.availableLeft + 'px';\n    debugElement.style.width = e.detail.availableWidth + 'px';\n    debugElement.style.height = e.detail.availableHeight + 'px';\n}\n\nlet removeVisualDebug = (e) => {\n\n    let elements = document.getElementsByClassName('debug-element'),\n        i = elements.length;\n\n    while (i--) {\n        elements[i].parentNode.removeChild(elements[i]);\n    }\n}\n\nwindow.addEventListener('resize', removeVisualDebug, false);\nwindow.addEventListener('scroll', removeVisualDebug, false);\n\nlet showByArea = (e) => {\n\n    if (e.detail.availableArea > 10) {\n\n        e.target.innerText = 'Loaded';\n        e.target.classList.add('inverted', 'blue');\n\n        visualDebug(e);\n\n        e.removeHandler();\n    }\n}\n\nlet showByVerticalPixels = (e) => {\n\n    if (e.detail.availableHeight > 10) {\n\n        e.target.innerText = 'Loaded';\n        e.target.classList.add('inverted', 'orange');\n\n        visualDebug(e);\n\n        e.removeHandler();\n    }\n}\n\nlet showByHorizontalPixels = (e) => {\n\n    if (e.detail.availableWidth > 10) {\n\n        e.target.innerText = 'Loaded';\n        e.target.classList.add('inverted', 'green');\n\n        visualDebug(e);\n\n        e.removeHandler();\n    }\n}\n\n// Using selectors\nviewPortAction.add('#item-1', showByArea);\nviewPortAction.add('#item-2', showByArea);\nviewPortAction.add('#item-3', showByArea);\nviewPortAction.add('#item-4', showByVerticalPixels);\n\n// Using elements\nviewPortAction.add(document.getElementById('item-5'), showByVerticalPixels, {\n    once: true\n});\n\nviewPortAction.add(document.getElementById('item-6'), showByVerticalPixels);\nviewPortAction.add(document.getElementById('item-7'), showByHorizontalPixels);\nviewPortAction.add(document.getElementById('item-8'), showByHorizontalPixels);\n\n// Element is not found\nviewPortAction.add(document.getElementById('item-to-fail'));","import ViewportEvent from './viewportEvent';\n\nlet timeout = 0;\n\nconst defaultOptions = {\n    wait: 100,\n    once: false\n};\n\nconst items = [];\n\nconst createEvent = (element, e, details, removeHandler) => {\n\n    return new ViewportEvent(e, {\n        target: element,\n        detail: details,\n        removeHandler: removeHandler\n    });\n}\n\nconst removeMethod = function (item) {\n\n    return function () {\n        \n        for (let i = 0, iLen = items.length; i < iLen; i++) {\n\n            if (items[i] === item) {\n\n                items.splice(i, 1);\n                break;\n            }\n        }\n    };\n};\n\nconst handler = function (e) {\n\n    clearTimeout(timeout);\n\n    // Delay the checks\n    timeout = setTimeout(function () {\n\n        let html = document.documentElement,\n            clientHeight = html.clientHeight,\n            clientRect,\n            details,\n            visibleHeight,\n            index = items.length,\n            item,\n            options;\n\n        while (index--) {\n\n            item = items[index];\n            options = item.options;\n            clientRect = item.element.getBoundingClientRect();\n            visibleHeight = clientRect.height;\n\n            if (clientRect.top >= visibleHeight * -1 && clientRect.bottom <= clientHeight + visibleHeight) {\n\n                details = {\n                    // Available values\n                    availableTop: clientRect.top < 0 ? 0 : clientRect.top,\n                    availableBottom: clientRect.bottom > html.clientHeight ? html.clientHeight : clientRect.bottom,\n                    availableLeft: clientRect.left < 0 ? 0 : clientRect.left,\n                    availableRight: clientRect.right > html.clientWidth ? html.clientWidth : clientRect.right,\n                    // Client rect values\n                    top: clientRect.top,\n                    bottom: clientRect.bottom,\n                    left: clientRect.left,\n                    right: clientRect.right,\n                    height: clientRect.height,\n                    width: clientRect.width\n                };\n\n                details.availableWidth = details.availableRight - details.availableLeft;\n                details.availableHeight = details.availableBottom - details.availableTop;\n                details.availableArea = details.availableWidth * details.availableHeight;\n\n                item.callback(createEvent(item.element, e, details, removeMethod(item)));\n                \n                // Remove the element from the list of items as the callback is already executed\n                if (options.once)\n                    items.splice(index, 1);\n            }\n\n        }\n\n        // Unbind the events if there nothing to watch for\n        if (!items.length) {\n            \n            window.removeEventListener(\"resize\", handler, false);\n            window.removeEventListener(\"scroll\", handler, false);\n        }\n\n    }, 500);\n}\n\nconst viewPortAction = {\n\n    /**\n     * Add elements to be checked when available on the viewport. Also add\n     * callback to be executed when the element is on teh viewport.\n     * \n     * ```javascript\n     * let options = {\n     *     // How long it should wait to call the callback. Defaults to 0.\n     *     wait: 100,\n     *     // Whether to trigger the callback just once. Defaults to false.\n     *     once: false,\n     *     // The document the element will be checked against. Defaults to window.document.\n     *     document: window.document\n     * };\n     * ```\n     * \n     * @method add\n     * @param {Element|String} element The HTML element or the selector.\n     * @param {Function} callback The function to be executed when on viewport.\n     * @param {Object} options Some optional parameters\n     */\n    add: function (element, callback, options) {\n\n        viewPortAction.whenDocumentReady(function (defaultView, e) {\n\n            // Resolve selectors if element is a string\n            element = typeof element === 'string' ? defaultView.document.querySelector(element) : element;\n\n            // Only bind the events if the node is an instance of Element and attached to a document\n            if (!(element instanceof Element) || element.ownerDocument !== defaultView.document)\n                return;\n\n            options = typeof options === 'object' && !Array.isArray(options) ? {\n                wait: typeof options.wait === 'number' ? options.wait : defaultOptions.wait,\n                once: typeof options.once === 'boolean' ? options.once : defaultOptions.once\n            } : defaultOptions;\n\n            // Only bind the DOM events when there is something to check\n            if (!items.length) {\n\n                defaultView.addEventListener(\"resize\", handler, false);\n                defaultView.addEventListener(\"scroll\", handler, false);\n            }\n            \n            items.push({\n                element: element,\n                callback: callback,\n                options: options\n            });\n\n            // Call the handler right away to check it the element is already in the\n            // viewport\n            handler(e);\n\n        }, options ? options.document : null);\n    },\n\n    /**\n     * Execute a callback function when a given document is ready.\n     * \n     * @method whenDocumentReady\n     * @param {Function} callback \n     * @param {Document} doc The optional document. It defaults to `window.document`.\n     */\n    whenDocumentReady: function (callback, doc) {\n\n        // Fallback to the current document\n        doc = doc && doc.nodeType === 9 ? doc : window.document;\n\n        if (doc.readyState === 'complete') {\n            callback(doc.defaultView);\n        } else {\n\n            // Support Cordova or document ready events\n            doc.addEventListener(window.cordova ? 'deviceready' : 'DOMContentLoaded', (e) => {\n                callback(doc.defaultView, e);\n            }, false);\n        }\n    }\n};\n\nexport default viewPortAction;","class ViewportEvent {\n\n    constructor (e, options) {\n\n        this._originalEvent = e;\n        this._detail = options.detail;\n        this._target = options.target;\n        this._removeHandler = options.removeHandler;\n    }\n\n    get type () {\n        return 'viewport';\n    }\n\n    get originalEvent () {\n        return this._originalEvent;\n    }\n\n    get detail () {\n        return this._detail;\n    }\n\n    get target () {\n        return this._target;\n    }\n\n    get currentTarget () {\n        return this.target;\n    }\n\n    get srcElement () {\n        return this.target;\n    }\n\n    get timeStamp () {\n        return this.originalEvent.timeStamp;\n    }\n\n    removeHandler () {\n        this._removeHandler();\n    }\n}\n\nexport default ViewportEvent;"],"sourceRoot":""}