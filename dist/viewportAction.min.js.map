{"version":3,"file":"viewportAction.min.js","mappings":"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","sources":["webpack://viewportAction/webpack/universalModuleDefinition","webpack://viewportAction/webpack/bootstrap","webpack://viewportAction/webpack/runtime/define property getters","webpack://viewportAction/webpack/runtime/hasOwnProperty shorthand","webpack://viewportAction/./src/viewportAction.ts","webpack://viewportAction/./src/viewportEvent.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"viewportAction\"] = factory();\n\telse\n\t\troot[\"viewportAction\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { Detail } from './EventOptions';\nimport ViewportEvent from './viewportEvent';\n\nlet timeout: any;\n\nexport interface Item {\n    element: HTMLElement;\n    callback: Callback;\n    options: Options;\n}\n\nexport interface Options {\n    readonly wait?: number;\n    readonly once?: boolean;\n    readonly document?: Document;\n}\n\nexport type Callback = (e?: ViewportEvent) => void;\n\nconst items = new Set<Item>();\n\nconst defaultAddOptions = {\n    wait: 100,\n    once: false,\n    document: window.document\n}\n\nconst createEvent = (element: HTMLElement, e: Event, details: Detail, removeHandler: () => void) => {\n\n    return new ViewportEvent(e, {\n        target: element,\n        detail: details,\n        removeHandler: removeHandler\n    });\n}\n\nconst removeMethod = function (item: Item) {\n\n    return function () {\n        \n        if (items.has(item))\n            items.delete(item);\n    };\n}\n\n/**\n * Resolve selectors if element is a string.\n * \n * @method getElement\n * @param element The element or selector.\n * @param defaultView The window where the element is from.\n */\nconst getElement = function (element: HTMLElement | String, defaultView: Window) {\n    return (typeof element === 'string' ? defaultView.document.querySelector(element) : element) as HTMLElement;\n}\n\nconst check = function (item: Item, items: Set<Item>, clientWidth: number, clientHeight: number, e?: Event) {\n\n    let options = item.options,\n        clientRect = item.element.getBoundingClientRect(),\n        visibleHeight = clientRect.height;\n\n    if (clientRect.top >= visibleHeight * -1 && clientRect.bottom <= clientHeight + visibleHeight) {\n\n        const availableTop = clientRect.top < 0 ? 0 : clientRect.top;\n        const availableBottom = clientRect.bottom > clientHeight ? clientHeight : clientRect.bottom;\n        const availableLeft = clientRect.left < 0 ? 0 : clientRect.left;\n        const availableRight = clientRect.right > clientWidth ? clientWidth : clientRect.right;\n        const availableWidth = availableRight - availableLeft;\n        const availableHeight = availableBottom - availableTop;\n\n        const details: Detail = Object.freeze({\n            // Available values\n            availableTop: availableTop,\n            availableBottom: availableBottom,\n            availableLeft: availableLeft,\n            availableRight: availableRight,\n            availableWidth: availableRight - availableLeft,\n            availableHeight: availableBottom - availableTop,\n            availableArea: availableWidth * availableHeight,\n            // Client rect values\n            top: clientRect.top,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            right: clientRect.right,\n            height: clientRect.height,\n            width: clientRect.width\n        });\n\n        item.callback(createEvent(item.element, e, details, removeMethod(item)));\n        \n        // Remove the element from the list of items as the callback is already executed\n        if (options.once)\n            items.delete(item);\n    }\n}\n\nconst handler = function (e: Event) {\n\n    clearTimeout(timeout);\n\n    // Delay the checks\n    timeout = setTimeout(function () {\n\n        let html = document.documentElement,\n            clientWidth = html.clientWidth,\n            clientHeight = html.clientHeight,\n            item;\n\n        for (item of items) {\n            check(item, items, clientWidth, clientHeight, e);\n        }\n\n        // Unbind the events if there nothing to watch for\n        if (!items.size) {\n            \n            window.removeEventListener('resize', handler, false);\n            window.removeEventListener('scroll', handler, false);\n        }\n\n    }, 500);\n}\n\nconst viewportAction = Object.create({\n    \n    /**\n     * Execute a callback function when a given document is ready.\n     * \n     * NOTE: this method is used internally by the other methods and it's\n     * exposed for convenience in case you would like to used it.\n     * \n     * @param callback \n     * @param doc The optional document. It defaults to `window.document`.\n     */\n    whenDocumentReady: function (callback: (defaultView?: Window, e?: Event) => void, doc: Document) {\n\n        // Fallback to the current document\n        doc = doc && doc.nodeType === 9 ? doc : window.document;\n\n        if (doc.readyState === 'complete') {\n            callback(doc.defaultView);\n        } else {\n\n            // Support Cordova or document ready events\n            doc.addEventListener((window as any).cordova ? 'deviceready' : 'DOMContentLoaded', (e: Event) => {\n                callback(doc.defaultView, e);\n            }, false);\n        }\n    },\n\n    /**\n     * Add elements to be checked when available on the viewport. Also add\n     * callback to be executed when the element is on the viewport.\n     * \n     * ```javascript\n     * const options = {\n     *     // How long it should wait to call the callback. Defaults to 0.\n     *     wait: 100,\n     *     // Whether to trigger the callback just once. Defaults to false.\n     *     once: false,\n     *     // The document the element will be checked against. Defaults to window.document.\n     *     document: window.document\n     * };\n     * \n     * viewportAction.add('#my-selector-or-element', (e) => { ... }, options);\n     * ```\n     * \n     * @param element The HTML element or the selector.\n     * @param callback The function to be executed when on viewport.\n     * @param options Some optional parameters\n     */\n    add: function (element: HTMLElement | String, callback: Callback, options: Options = {}) {\n\n        const mergedOptions = {...options, ...defaultAddOptions};\n\n        this.whenDocumentReady((defaultView: Window, e: Event) => {\n\n            element = getElement(element, defaultView);\n\n            // Only bind the events if the node is an instance of Element and attached to a document\n            if (!(element instanceof Element) || element.ownerDocument !== defaultView.document)\n                return;\n\n            // Only bind the DOM events when there is something to check\n            if (!items.size) {\n\n                defaultView.addEventListener('resize', handler, false);\n                defaultView.addEventListener('scroll', handler, false);\n            }\n            \n            items.add({\n                element: element,\n                callback: callback,\n                options: mergedOptions\n            });\n\n            // Call the handler right away to check it the element is already in the\n            // viewport\n            handler(e);\n\n        }, mergedOptions ? mergedOptions.document : null);\n    },\n\n    /**\n     * Check when an element is on the viewport.\n     * \n     * @param element The element or selector.\n     * @param callback The function to be executed when on viewport.\n     * @param failedCallback The function to be executed when the element is not found in the document. \n     */\n    check: function (element: HTMLElement | String, callback: Callback, failedCallback: Function) {\n\n        element = getElement(element, window);\n\n        // Only bind the events if the node is an instance of Element and attached to a document\n        if (!(element instanceof Element) || element.ownerDocument !== window.document) {\n            failedCallback();\n            return;\n        }\n\n        const html = document.documentElement;\n        const item = {\n            element: element,\n            callback: callback,\n            options: {\n                wait: 0,\n                once: false\n            }\n        };\n\n        check(item, new Set(), html.clientWidth, html.clientHeight);\n    }\n});\n\nexport default viewportAction;","import EventOptions from './EventOptions';\n\n/**\n * The event specific to the ViewportAction.\n */\nclass ViewportEvent {\n\n    readonly type: 'viewport';\n    readonly originalEvent: Event;\n    readonly detail: Object;\n    readonly target: HTMLElement;\n    readonly removeHandler: () => void;\n\n    constructor (e: Event, options: EventOptions) {\n\n        this.originalEvent = e;\n        this.detail = options.detail;\n        this.target = options.target;\n        this.removeHandler = options.removeHandler;\n    }\n\n    get currentTarget () {\n        return this.target;\n    }\n\n    get srcElement () {\n        return this.target;\n    }\n\n    get timeStamp () {\n        return this.originalEvent.timeStamp;\n    }\n}\n\nexport default ViewportEvent;"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","timeout","items","Set","defaultAddOptions","wait","once","document","window","removeMethod","item","has","delete","getElement","element","defaultView","querySelector","check","clientWidth","clientHeight","e","options","clientRect","getBoundingClientRect","visibleHeight","height","top","bottom","availableTop","availableBottom","availableLeft","left","availableRight","right","availableWidth","availableHeight","details","freeze","availableArea","width","callback","removeHandler","constructor","this","originalEvent","detail","target","currentTarget","srcElement","timeStamp","createEvent","handler","clearTimeout","setTimeout","html","documentElement","size","removeEventListener","create","whenDocumentReady","doc","nodeType","readyState","addEventListener","cordova","add","mergedOptions","Element","ownerDocument","failedCallback"],"sourceRoot":""}